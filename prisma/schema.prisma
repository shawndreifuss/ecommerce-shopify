datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole        @default(USER)
  Authenticator Authenticator[]
  password      String?
  orders        Order[]
  auditLogs     AuditLog[]
  shopifyCustomer ShopifyCustomer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ShopifyCustomer {
  id                  String   @id @default(cuid())
  shopifyCustomerId    String   @unique
  firstName            String
  lastName             String
  email                String   @unique
  phoneNumber          String?
  address              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  userId   String?    @unique
  user     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  price       Float
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  variants    Variant[]
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  stockLevel  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Add reverse relation
  orderProducts OrderProduct[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  products  Product[]
}

model Variant {
  id         String     @id @default(cuid())
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  size       String?
  color      String?
  price      Float?
  sku        String     @unique
  stockLevel Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Supplier {
  id        String     @id @default(cuid())
  name      String     @unique
  email     String?
  phone     String?
  products  Product[]
  orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}


model Order {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  products     OrderProduct[]
  totalAmount  Float
  paymentId    String        @unique
  shippingId   String        @unique
  supplierId   String
  supplier    Supplier      @relation(fields: [supplierId], references: [id])
  status       OrderStatus   @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Define relation fields only in the Order model
  payment      Payment       @relation(fields: [paymentId], references: [id])
  shipping     Shipping      @relation(fields: [shippingId], references: [id])
}

model OrderProduct {
  id         String     @id @default(cuid())
  orderId    String
  order      Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  quantity   Int        @default(1)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Payment {
  id        String     @id @default(cuid())
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  amount    Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cardLastFour String 
  order     Order?
}


enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}




model Shipping {
  id        String     @id @default(cuid())
  address   String
  status    ShippingStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Remove relation attributes from Shipping
  order     Order?
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

model AuditLog {
  id        String     @id @default(cuid())
  action    String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
}
